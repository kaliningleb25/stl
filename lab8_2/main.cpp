#include <iostream>
#include <list>
using namespace std;

/* Калинин Глеб (23531/21-1)
 *
 *
 * Разработать программу, которая:
- Реализует иерархию геометрических фигур состоящую из:
  - Класс Shape.
    - Содержит информацию о положении центра фигуры (координаты x и y).
    - Содердит метод IsMoreLeft, позволяющий определить расположена ли данная фигура левее (определяется по положению центра)
    чем фигура переданная в качестве аргумента
    - Содердит метод IsUpper, позволяющий определить расположена ли данная фигура выше (определяется по положению центра)
    чем фигура переданная в качестве аргумента
    - Определяет чисто виртаульную функцию рисования Draw (каждая фигура в реализации этой функци должна выводить на
    стандартный вывод свое название и положение цента)
  - Класс Circle производный от класса Shape
    - Реализует Draw
  - Класс Triangle производный от класса Shape
    - Реализует Draw
  - Класс Square производный от класса Shape
    - Реализует Draw

- Содержит список list<Shape*>, заполенный указателями на различные фигуры
- С помощью стандартных алгоритмов и адаптеров выводит (Draw) все фигуры
- С помощью стандартных алгоритмов и адаптеров сортирует список по положению центра слева-направо
 (имется в виду, что в начале списка должны идти фигуры находящиеся левее, координата x ) и выводит фигуры (Draw)
- С помощью стандартных алгоритмов и адаптеров сортирует список по положению центра справа-налево и выводит фигуры
- С помощью стандартных алгоритмов и адаптеров сортирует список по положению центра сверху-вниз и выводит фигуры
 *
 */

class Shape {
public:
    Shape(): x(rand()%5),y(rand()%5) {}

    virtual void Draw() {}

    bool isMoreLeft(Shape* shape) {
            return (x < shape->x);
    }


    bool isUpper(Shape* shape) {
            return (y > shape->y);
    }


protected:
    int x, y;
};

class Circle : public Shape {
public:
    void Draw() {
        cout << "Круг (" << x << "," << y << ")\n";
    }

};

class Triangle : public Shape {
public:
    void Draw() {
        cout << "Треугольник (" << x << "," << y << ")\n";
    }

};

class Square : public Shape {
public:
    void Draw() {
        cout << "Квадрат (" << x << "," << y << ")\n";
    }
};


int main() {
    srand(time(NULL));

    // Содержит список list<Shape*>, заполенный указателями на различные фигуры
    list<Shape*> shapes;

    shapes.push_back(new Circle());
    shapes.push_back(new Triangle());
    shapes.push_back(new Square());

    // С помощью стандартных алгоритмов и адаптеров выводит (Draw) все фигуры
    cout << "Исходный список:\n";
    for_each(shapes.begin(), shapes.end(), mem_fun(&Shape::Draw));

    // С помощью стандартных алгоритмов и адаптеров сортирует список по положению центра слева-направо
    // (имется в виду, что в начале списка должны идти фигуры находящиеся левее, координата x) и выводит фигуры (Draw)
    shapes.sort(mem_fun(&Shape::isMoreLeft));
    cout << "\nОтсортированный список по положению слева-направо:\n";
    for_each(shapes.begin(), shapes.end(), mem_fun(&Shape::Draw));

    // С помощью стандартных алгоритмов и адаптеров сортирует список по положению центра справа-налево и выводит фигуры
    shapes.reverse();
    cout << "\nОтсортированный список по положению справа-налево:\n";
    for_each(shapes.begin(), shapes.end(), mem_fun(&Shape::Draw));

    // С помощью стандартных алгоритмов и адаптеров сортирует список по положению центра сверху-вниз и выводит фигуры
    shapes.sort(mem_fun(&Shape::isUpper));
    cout << "\nОтсортированный список по положению сверху-вниз:\n";
    for_each(shapes.begin(), shapes.end(), mem_fun(&Shape::Draw));

    return 0;
}